
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";

}

<h2>Index</h2>
<div id="calendar">

</div>

<div id="myModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title"><span id="eventTitle"></span></h4>
            </div>

            <div class="modal-body">
                <button id="btnDelete" class="btn btn-default btn-sm pull-right">
                    <span class="glyphicon glyphicon-remove"></span>Remove
                </button>
                <button id="btnEdit" class="btn btn-default btn-sm pull-right" style="margin-right:5px">
                    <span class="glyphicon glyphicon-pencil"></span>Edit
                </button>
                <p id="pDetails"></p>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>

        </div>
    </div>
</div>


<div id="myModalSave" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title">Save Event</h4>
            </div>

            <div class="modal-body">
                <form>
                    <input type="hidden" id="hdEventID" value="0" />

                    <div class="form-group">
                        <label>Title</label>
                        <input type="text" id="txtTitle" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label>Start</label>
                        <div class="input-group date" id="dtp1">
                            <input type="text" id="txtStart" class="form-control" onfocus="$(this).next().trigger('click')" onkeydown="event.preventDefault()" />
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                        </div>
                    </div>

                    <div class="form-group">
                        <label>End</label>
                        <div class="input-group date" id="dtp2">
                            <input type="text" id="txtEnd" class="form-control" onfocus="$(this).next().trigger('click')" onkeydown="event.preventDefault()" />
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                        </div>
                    </div>

                    <div class="form-group">
                        <label>Tutor</label>
                        <input type="text" id="txtTutorName" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label>Description</label>
                        <input type="text" id="txtDescription" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label>Theme Colour</label>
                        <select id="ddThemeColour" class="form-control">
                            <option value="">Default</option>
                            <option value="red">Red</option>
                            <option value="blue">Blue</option>
                            <option value="black">Black</option>
                            <option value="green">Green</option>
                        </select>
                    </div>
                </form>
                <div class="modal-footer">
                    <button type="button" id="btnSave" class="btn btn-success">Save</button>
                    <button type="button" class="btn btn-default pull-right" data-dismiss="modal">Close</button>
                </div>
            </div>

        </div>
    </div>
</div>

@*<link href="//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-glyphicons.css" rel="stylesheet">*@
<link href="//cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.4.0/fullcalendar.min.css" rel="stylesheet" />
<link href="//cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.4.0/fullcalendar.print.css" rel="stylesheet" media="print" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.47/css/bootstrap-datetimepicker.min.css" rel="stylesheet" />

@section Scripts{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.4.0/fullcalendar.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.47/js/bootstrap-datetimepicker.min.js"></script>

    <script>
        $(document).ready(function () {

            var events = [];
            var selectedEvent = null;
            FetchEventAndRenderCalendar();

            function FetchEventAndRenderCalendar() {
                //fetch info from database and add it to the events array
                events = [];
                $.ajax({
                    type: "GET",
                    url: "/SessionScheduler/GetEvents",
                    success: function (data) {
                        $.each(data, function (i, v) {
                            //push datat from database to this events object

                            events.push({
                                id: v.Id,
                                title: v.Title,
                                description: v.Description,
                                start: moment(v.StartDate),
                                end: moment(v.EndDate),
                                tutorName: v.TutorName,
                                color: v.ThemeColour
                            });
                        })
                        //then display the calendar with the events
                        GenerateCalender(events);
                    },
                    error: function (error) {
                        alert('failed');
                    }
                })
            }



            function GenerateCalender(events) {
                $('#calendar').fullCalendar('destroy');
                $('#calendar').fullCalendar({

                    showNonCurrentDates: false,
                    dayOfMonthFormat: 'dddd DD/MM',
                    eventDurationEditable: false,
                    eventOverlap: false,
                    selectOverlap: false,
                    minTime: "07:00:00",
                    maxTime: "22:00:00",
                    slotDuration: '00:60:00',
                    selectHelper: true,
                    allDaySlot: false,
                    hiddenDays: [0, 6],
                    titleFormat: 'MMMM DD YYYY',
                    contentHeight: 400,
                    defaultDate: new Date(), //current date
                    timeFormat: 'h(:mm)a',

                    header: {
                        left: 'prev,next today', //left buttons
                        center: 'title', // will show the month and year
                        right: 'month,agendaWeek' // the left side options
                    },

                    eventLimit: true, //it will show + sign when more events are added into cell
                    eventColor: '#378006',
                    events: events, //what events i want to render and passed as param
                    //this function will be called when we click any event

                    eventClick: function (calEvent, jsEvent, view) {
                        selectedEvent = calEvent;

                        //to show the event data in the pop up model
                        $('#myModal #eventTitle').text(calEvent.title);
                        var $description = $('<div />');

                        $description.append($('<p/>').html('<b>Start: </b>' + calEvent.start.format("DD-MMM-YYYY hh:mm a")));

                        if (calEvent.end != null) {
                            $description.append($('<p/>').html('<b>End:</b>' + calEvent.end.format("DD-MMM-YYYY hh:mm a")));
                        }

                        $description.append($('<p />').html('<b>Tutor:</b>' + calEvent.tutorName));
                        $description.append($('<p />').html('<b>Description:</b>' + calEvent.description));
                        $('#myModal #pDetails').empty().html($description); //empty and then add all details to myModal and pDetails

                        $('#myModal').modal(); //open modal dialog pop window
                    },
                    selectable: true,
                    select: function (start, end) {
                        if (start.isBefore(moment())) {
                            $('#calendar').fullCalendar('unselect');
                            alert('This date/time has passed!');
                            return;
                        }

                        selectedEvent = {
                            id: 0,
                            title: '',
                            description: '',
                            start: start,
                            end: end,
                            tutorName: '',
                            colour: ''
                        };
                        openAddEditForm();
                        $('#calendar').fullCalendar('unselect');
                    },
                    editable: true,
                    eventDrop: function (event) {
                        var data = {
                            Id: event.id,
                            Title: event.title,
                            StartDate: event.start.format('DD/MM/YYYY hh:mm a'),
                            EndDate: event.end.format('DD/MM/YYYY hh:mm a'),
                            Description: event.description,
                            TutorName: event.tutorName,
                            ThemeColour: event.colour
                        };
                        SaveEvent(data);
                    }
                })
            }

            $('#btnEdit').click(function () {
                //Open modal dialog for edit event
                openAddEditForm();
            })

            $('#btnDelete').click(function () {
                //Open modal dialog for delete event
                if (selectedEvent != null && confirm("Are you sure?")) {
                    $.ajax({
                        type: "POST",
                        url: '/SessionScheduler/DeleteEvent',
                        data: { 'Id': selectedEvent.id },
                        success: function (data) {
                            if (data.status) {
                                //refresh the calendar if the status is true else its failed
                                FetchEventAndRenderCalendar();
                                $('#myModal').modal('hide'); //hide modal dialog pop window
                            }
                        },
                        error: function () {
                            alert('Failed');
                        }
                    })
                }
            })



            $('#dtp1,#dtp2').datetimepicker({

                //For accepting this format in .Net model binder, we have to set culture in web.config file
                //otherwise it wont bind     <globalization culture="en-GB" uiCulture=""/>               
                format: 'DD/MM/YYYY hh:mm a',
                daysOfWeekDisabled: [0, 6],
                stepping: 60, //Mins increment
                enabledHours: [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22],

            });

           

            function openAddEditForm() {
                //if the event is not null - then show all the data in the fields
                if (selectedEvent != null) {
                    $('#hdEventID').val(selectedEvent.id);
                    $('#txtTitle').val(selectedEvent.title);
                    $('#txtStart').val(selectedEvent.start.format('DD/MM/YYYY hh:mm a'));
                    //was getting an error coz the end date is null
                    $('#txtEnd').val(selectedEvent.end.format('DD/MM/YYYY hh:mm a'));
                    $('#txtDescription').val(selectedEvent.description);
                    $('#txtTutorName').val(selectedEvent.tutorName);
                    $('#ddThemeColour').val(selectedEvent.colour);
                }
                $('#myModal').modal('hide');
                $('#myModalSave').modal(); ////111
            }

            $('#btnSave').click(function () {
                //validation
                if (document.getElementById('txtTitle').value.trim() == "") {
                    alert('Title required');
                    return;
                }

                if (document.getElementById('txtStart').value.trim() == "") {
                    alert('Start date required');
                    return;
                }

                if (document.getElementById('txtEnd').value.trim() == "") {
                    alert('End date required!');
                    return;
                }

                var selectedStartDate = moment(document.getElementById('txtStart').value.trim(), "DD/MM/YYYY HH:mm a").toDate();
                var selectedEndDate = moment(document.getElementById('txtEnd').value.trim(), "DD/MM/YYYY HH:mm a").toDate();

                if (selectedStartDate > selectedEndDate) {
                    alert('Invalid end date!');
                    return;
                }

                if (selectedStartDate.getTime() == selectedEndDate.getTime()) {
                    alert('Start/End time can not be the same!');
                    return;
                }

                var startHour = selectedStartDate.getHours();
                var endHour = selectedEndDate.getHours();

                var difference = endHour - startHour;

                if (difference < 2) {
                    alert('Duration of each session or class must be 2 hours long!');
                    return;
                }
                else if (difference < 0 || difference > 2) {
                    alert('Duration cannot be this long! Each Event must be 2 hours long!');
                    return;
                }      
                
                for (var i = 0; i < events.length; i++) {
                    if (events[i].id != selectedEvent.id) {
                        var currentEventDate = events[i].start.toDate().toLocaleDateString();
                       
                        var currentEventStartTime = events[i].start.toDate().toLocaleTimeString();
                        var currentEventEndTime = events[i].end.toDate().toLocaleTimeString();                               

                        var selectedStartHour = selectedStartDate.getHours();
                        var selectedEndHour = selectedEndDate.getHours();

                        var currentStartHour = events[i].start.toDate().getHours();
                        var currentEndHour = events[i].end.toDate().getHours();


                        if (selectedStartDate.toLocaleDateString() === currentEventDate)
                        {                          
                            if ((selectedStartHour > currentStartHour && selectedStartHour < currentEndHour) ||
                                (selectedEndHour > currentStartHour && selectedEndHour < currentEndHour))
                            {
                                alert('You cannot overlap events!');
                                return;
                            }

                            if ((selectedStartDate.toLocaleTimeString() === currentEventStartTime &&
                                selectedEndDate.toLocaleTimeString() === currentEventEndTime))
                            {                               
                                alert('An event already exist in the selected time!');
                                return;
                            }

                        }                       
                    }
                }
   

             

                if (document.getElementById('txtTutorName').value.trim() == "") {
                    alert('Tutor Name required');
                    return;
                }

                //call the function to submit data to the server
                var data = {
                    Id: $('#hdEventID').val(),
                    Title: $('#txtTitle').val(),
                    StartDate: $('#txtStart').val(),
                    EndDate: $('#txtEnd').val(),
                    Description: $('#txtDescription').val(),
                    TutorName: $('#txtTutorName').val(),
                    ThemeColour: $('#ddThemeColour').val()
                }
                SaveEvent(data);
            })


            function checkTime() {
                var d = new Date(); // current time
                var hours = d.getHours();
                var mins = d.getMinutes();
                var day = d.getDay();

                return day >= 1
                    && day <= 5
                    && hours >= 9
                    && (hours < 17 || hours === 17 && mins <= 30);
            }

            //check whether or not the calendar event passed in overlaps with an existing event in the current (client-side) calendar data
            //the first parameter should be the event which is being tested
            //the second parameter should be a jQuery object wrapping the calendar HTML element
            function isCalendarEventOverlapping(event) {
                var evts = $('#calendar').fullCalendar('clientEvents');
                for (i in evts) {
                    if (evts[i].id != event.id) {
                        if (event.start.isBefore(evts[i].end) && event.end.isAfter(evts[i].start)) {
                            return true;
                        }
                    }
                }
                return false;
            }


            function SaveEvent(data) {
                if (selectedEvent != null && confirm("Are you sure?")) {
                    $.ajax({
                        type: "POST",
                        url: '/SessionScheduler/SaveEvent',
                        data: data,
                        success: function (data) {
                            if (data.status) {
                                //refresh the calendar if the status is true else its failed
                                FetchEventAndRenderCalendar();
                                $('#myModalSave').modal('hide'); //hide modal dialog pop window
                            }
                        },
                        error: function () {
                            alert('Failed');
                        }
                    })
                }
            }
        })




    </script>
}



