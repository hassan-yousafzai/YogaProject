@{
    ViewBag.Title = "Schedule Manager";
    Layout = "~/Views/Shared/_Layout.cshtml";

}

<h2>Schedule Manager</h2>
<hr />

<p style="text-align:center">
    Schedule an event by clicking on a slot in the calendar.<br />
    Note: Event can only be one hour long, so it is recommended that you schedule on the "Week" tab.
</p>

@* This is the div that is populated to show th calendar by the plugin used *@
<div id="calendar"></div>

@* my model that is used when a tutor clicks on a session or class *@
<div id="myModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title"><span id="eventTitle"></span></h4>
            </div>

            <div class="modal-body">

                <button id="btnEdit" class="btn btn-info pull-right" style="margin-right:5px">
                    <span class="glyphicon glyphicon-pencil"></span> Edit
                </button>
                <p id="pDetails"></p>
            </div>

            <div class="modal-footer">
                <button id="btnDelete" class="btn btn-danger pull-left">
                    <span class="glyphicon glyphicon-trash"></span> Delete
                </button>
                <button type="button" class="btn btn-warning" data-dismiss="modal">Close</button>
            </div>

        </div>
    </div>
</div>
<br />

@*a model that is shown to the tutor when the tutor clicks on en empty slot of the calendar. This model contains many fields required to record a class or session *@
<div id="myModalSave" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title">Save Event</h4>
            </div>

            <div class="modal-body">
                <form>
                    <div class="row">
                        <input type="hidden" id="hdEventID" value="0" />

                        <div class="form-group col-md-6 col-lg-6 col-sm-6">
                            <label>Title</label>
                            <select id="txtTitle" class="form-control selectpicker">
                                <option selected disabled value="default">Please Select</option>
                                <option value="Session">Session</option>
                                <option value="Class">Class</option>
                            </select>
                        </div>

                        <div class="form-group col-md-6 col-lg-6 col-sm-6">
                            <label>Theme Colour</label>
                            <select disabled id="ddThemeColour" class="form-control">
                                <option value="default">Please Select</option>
                                <option value="#78C2AD">Neptune</option>
                                <option value="#F3969A">Wewak</option>
                            </select>
                        </div>

                        <div class="form-group col-md-6 col-lg-6 col-sm-6">
                            <label>Start</label>
                            <div class="input-group date" id="dtp1">
                                <input type="text" id="txtStart" class="form-control" onfocus="$(this).next().trigger('click')" onkeydown="event.preventDefault()" />
                                <span classs="calendar-box" class="input-group-addon">
                                    <span class="glyphicon glyphicon-calendar"></span>
                                </span>
                            </div>
                        </div>

                        <div class="form-group col-md-6 col-lg-6 col-sm-6">
                            <label>End</label>
                            <div class="input-group date" id="dtp2">
                                <input type="text" id="txtEnd" class="form-control" onfocus="$(this).next().trigger('click')" onkeydown="event.preventDefault()" />
                                <span classs="calendar-box" class="input-group-addon">
                                    <span class="glyphicon glyphicon-calendar"></span>
                                </span>
                            </div>
                        </div>

                        <div class="form-group col-md-6 col-lg-6 col-sm-6">
                            <label>Select Branch</label>
                            <select id="DDLBranchNames" class="form-control selectpicker">
                                <option selected disabled value="">Please Select</option>
                            </select>
                        </div>

                        <div class="form-group col-md-6 col-lg-6 col-sm-6">
                            <label>Select Room Number</label>
                            <select disabled id="DDLRoomNumbers" class="form-control selectpicker">
                                <option selected disabled value="">Please Select</option>
                            </select>
                        </div>

                        <div class="form-group col-md-6 col-lg-6 col-sm-6">
                            <label>Choose Skills</label>
                            <select id="DDLSkills" name="selValue" data-live-search="true" class="selectpicker form-control" data-size="5" multiple data-max-options="2"></select>
                        </div>

                        <div class="form-group col-md-6 col-lg-6 col-sm-6">
                            <label>Capacity</label>
                            <input readonly type="text" id="intCapacity" class="form-control" />
                        </div>

                        <div class="form-group col-md-6 col-lg-6 col-sm-6" id="DDLRecurringDiv">
                            <label>Recur Options</label>
                            <select id="DDLRecurring" class="form-control selectpicker">
                                <option selected disabled value="">Please Select</option>
                                <option value="1">None</option>
                                <option value="2">Weekly</option>
                                <option value="3">Monthly</option>
                                <option value="4">Monthly by day</option>
                            </select>
                        </div>

                        <div class="form-group col-md-6 col-lg-6 col-sm-6" id="DDLRepeatDiv">
                            <label>Repeat</label>
                            <select id="DDLRepeat" class="form-control selectpicker">
                                <option selected disabled value="">Please Select</option>
                                <option hidden style="display:none" value="0">No Repeat</option>
                                <option value="2">Repeat x2</option>
                                <option value="4">Repeat x4</option>
                                <option value="6">Repeat x6</option>
                                <option value="8">Repeat x8</option>
                            </select>
                        </div>

                        <div class="form-group col-md-6 col-lg-6 col-sm-6">
                            <label>Class Type</label>
                            <select id="DDLClassType" class="form-control selectpicker">
                                <option selected disabled value="">Please Select</option>
                            </select>
                        </div>

                        <div class="form-group col-md-6 col-lg-6 col-sm-6">
                            <label>Total Price</label>
                            <div class="input-group">
                                <span class="input-group-addon">£</span>
                                <input id="txtPrice" readonly type="text" value="" class="form-control" />
                            </div>
                        </div>
                    </div>
                </form>
            </div>

            <div class="modal-footer">
                <button type="button" id="btnSave" style="width:20%" class="btn btn-success">Save</button>
                <button type="button" id="btnCloseMyModelSave" class="btn btn-warning pull-right" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@* required css files *@
<link href="~/Content/themes/fullcalendar.css" rel="stylesheet" />
<link href="~/Content/fullcalendar-print.css" rel="stylesheet" media="print" />
<link href="~/Content/bootstrap-datetimepicker.css" rel="stylesheet" />
<link href="~/Content/themes/bootstrap-select.css" rel="stylesheet" />

@section Scripts{
    @* requried js files *@
    <script src="~/Scripts/moment.js"></script>
    <script src="~/Scripts/fullcalendar.js"></script>
    <script type="text/javascript" src="~/Scripts/bootstrap-datetimepicker.js"></script>
    <script src="~/Scripts/bootstrap-select.js"></script>

    <script>
        //when the document is ready
        $(document).ready(function () {

            var events = [];
            var selectedEvent = null;
            FetchEventAndRenderCalendar();

            //the ajax request is used to send a request to GetEvents method of Class controller 
            //the data that is sent back is events for the logged in tutor 
            //that data is then added to the events array
            function FetchEventAndRenderCalendar() {
                events = [];

                $.ajax({
                    type: "POST",
                    url: "/Class/GetEvents",
                    success: function (data) {
                        $.each(data, function (i, v) {
                            //push data from database to this events object
                            events.push({
                                id: v.Id,
                                title: v.Title,
                                start: moment(v.StartDate),
                                end: moment(v.EndDate),
                                roomId: v.RoomId,
                                color: v.ThemeColour,
                                classTypeId: v.ClassTypeId,
                                tutorId: v.TutorId,
                                borderColor: '#000000',
                            });
                        })
                        //then display the calendar with the events
                        GenerateCalender(events);
                    },
                    error: function (error) {
                        alert('failed');
                    }
                })
            }

            //takes events 
            //genderates the calender with the from the events table
            function GenerateCalender(events) {
                //configuring the full calendar
                $('#calendar').fullCalendar('destroy');
                $('#calendar').fullCalendar({
                    showNonCurrentDates: false,
                    dayOfMonthFormat: 'dddd DD/MM',
                    eventDurationEditable: false,
                    eventOverlap: false,
                    selectOverlap: false,
                    firstDay: 1,
                    minTime: "07:00:00",
                    maxTime: "22:00:00",
                    slotDuration: '00:60:00',
                    selectHelper: true,
                    allDaySlot: false,
                    //hiddenDays: [0, 6],
                    titleFormat: 'MMMM DD YYYY',
                    contentHeight: "auto",
                    defaultDate: new Date(), //current date
                    timeFormat: 'h(:mm)a',

                    header: {
                        left: 'prev,next today', //left buttons
                        center: 'title', // will show the month and year
                        right: 'month,agendaWeek' // the left side options
                    },
                    eventLimit: true, //it will show + sign when more events are added into cell
                    events: events, //what events to render and passed as param

                    //this function will be called when a tutor clicks any event
                    eventClick: function (calEvent, jsEvent, view) {
                        selectedEvent = calEvent;

                        //to show the event data in the pop up model
                        $('#myModal #eventTitle').text(calEvent.title);
                        var $description = $('<div />');                   
                        $description.append($('<p/>').html('<b>Start: </b>' + calEvent.start.format("DD-MMM-YYYY hh:mm a")));
                        if (calEvent.end != null) {
                            $description.append($('<p/>').html('<b>End: </b>' + calEvent.end.format("DD-MMM-YYYY hh:mm a")));
                        }
                        $('#myModal #pDetails').empty().html($description); //empty and then add all details to myModal and pDetails
                        $('#myModal').modal(); //open modal dialog pop window
                    },
                    selectable: true,
                    select: function (start, end) {
                        //if the start date is before todays date then show alert error
                        if (start.isBefore(moment())) {
                            $('#calendar').fullCalendar('unselect');
                            alert('This date/time has passed!');
                            return;
                        }
                        //otherwise make an object with empty fields and set the start and end time to the selected slot
                        selectedEvent = {
                            id: 0,
                            title: document.getElementById("txtTitle").value = 'default',
                            description: '',
                            start: start,
                            end: end,
                            branchName: '',
                            roomNumber: '',
                            capacity: '',
                            availableCapacity: '',
                            color: document.getElementById("ddThemeColour").value = 'default',
                            price: '',
                            skillId: '',
                            classType: '',
                        };
                        ResetAllFields();
                        openAddEditForm();
                        $('#calendar').fullCalendar('unselect');
                    },
                    eventAfterRender: function (event, $el, view) {
                        var formattedTime = $.fullCalendar.formatRange(event.start, event.end, "h(:mm)a");
                        // if event has fc-short class, data-start value will be displayed
                        // remove fc-short class and update fc-time span text
                        if ($el.is('.fc-short')) {
                            $el.find(".fc-time span").text(formattedTime + " - " + event.title);
                            $el.removeClass('fc-short');
                            $el.find('.fc-title').remove();
                        }
                    },
                    editable: false,
                    eventDrop: function (event) {
                        
                    }
                })
            }

            //when user clicks on the close button reset all the fields 
            $('#btnCloseMyModelSave').click(function () {
                ResetAllFields();
            })

            //when user clicks on edit button disable room dropdown list
            //call the openAddEditForm
            $('#btnEdit').click(function () {
                $('#DDLRoomNumbers').removeAttr('disabled');
                $("#DDLRoomNumbers").selectpicker("refresh");
                openAddEditForm();
            })

            //when the user clicks on the delete button do the following
            $('#btnDelete').click(function () {
                //Open modal dialog for delete event - disable the delete button and edit if the user clicks ok
                if (selectedEvent != null && confirm("Are you sure to delete this event?")) {
                   
                    $("#btnDelete").prop("disabled", true);
                    $("#btnEdit").prop("disabled", true);

                    //send ajax request to the deleteEvent method of class controller and send id of the event with it 
                    $.ajax({
                        type: "POST",
                        url: '/Class/DeleteEvent',
                        data: { 'Id': selectedEvent.id },
                        success: function (data) {
                            if (data.status) {
                                //refresh the calendar if the status is true else its failed
                                FetchEventAndRenderCalendar();
                                $('#myModal').modal('hide'); //hide modal dialog pop window
                                alert("Cancellation email sent to those who booked the event.");
                                $("#btnDelete").prop("disabled", false);
                                $("#btnEdit").prop("disabled", false);

                            }
                            else {
                                alert("Something went wrong when deleting the event.");
                                $('#myModal').modal('hide'); //hide modal dialog pop window
                                $("#btnDelete").prop("disabled", false);
                                $("#btnEdit").prop("disabled", false);
                                return;
                            }
                        },
                        error: function () {
                            alert('Failed');
                        }
                    })
                } else {
                    $('#myModal').modal('hide'); //hide modal dialog pop window
                }
            })

            //configure the datetime picker for start and end date 
            $('#dtp1,#dtp2').datetimepicker({
                minDate: new Date(),
                showTodayButton: true,
                sideBySide: true,
                format: 'DD/MM/YYYY hh:mm a',
                //daysOfWeekDisabled: [0, 6],
                stepping: 60, //Mins increment
                enabledHours: [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22],
            });

            //a function that open the add or edit form based on what slot the user selects
            //if the slot is empty then the form will be empty, otherwise, the form will be populated with the correct data
            function openAddEditForm() {

                //if the event is not empty - the user has clicked on an event
                if (selectedEvent.id != 0 || selectedEvent != null) {
                    //populate all the fields with the correct data 
                    //set the start and end date time fields to the selected event start and end date time
                    $('#txtStart').val(selectedEvent.start.format('DD/MM/YYYY hh:mm a'));
                    $('#txtEnd').val(selectedEvent.end.format('DD/MM/YYYY hh:mm a'));

                    //if the selectedEvent.roomId exist and is valid 
                    //then call the fetch all the rooms from the rooms controller by sending the selectedEvent id
                    if (selectedEvent.roomId != undefined) {
                        $.ajax({
                            type: "POST",
                            url: '/Rooms/FetchRoomById', 
                            data: { 'Id': selectedEvent.roomId },
                            success: function (data) {
                                //set branch to selected branch. Disable Branches. refresh changes
                                $('#DDLBranchNames').selectpicker('val', data[0].BranchId);
                                $("#DDLBranchNames").prop("disabled", true);
                                $('#DDLBranchNames').selectpicker('refresh');

                                $('#DDLRoomNumbers').find('option:gt(0)').remove(); //remove all elements but the first one from rooms dropdown list

                                //get new rooms and assign them to the dropdownlist and refresh the list
                                for (var i = 0; i < data.length; i++) {
                                    $('#DDLRoomNumbers').append('<option value="' + data[i].Id + '">' + data[i].RoomNumber + '</option>');
                                    $('#DDLRoomNumbers').selectpicker('refresh');
                                    //set the selected room to the one user chosen
                                    if (data[i].Id == selectedEvent.roomId) {
                                        $('#DDLRoomNumbers').selectpicker('val', data[i].Id);
                                        $('#intCapacity').val(data[i].Capacity); //set the capacity
                                    }
                                }
                            },
                            error: function (error) {
                                alert('Failed to get the data for Rooms!');
                            }
                        })
                    }

                    //if the selected event id is not 0 - meaning there is an existing event that has been clicked
                    //send the selected event id to the GetClassSelectedSkills method of classSkills controller using ajax request
                    //get the data back and set the skills to the skills dropdown list as selected
                    if (selectedEvent.id != 0) {
                        $.ajax({
                            type: "POST",
                            url: '/ClassSkills/GetClassSelectedSkills',
                            data: { 'id': selectedEvent.id },
                            success: function (data) {
                                let optArr = [];
                                for (var i = 0; i < data.length; i++) {
                                    optArr.push(data[i].Skill.Id);
                                }
                                $('#DDLSkills').selectpicker('val', optArr);
                            },
                            error: function (error) {
                                alert('Failed to get selected skills for this class!');
                            }
                        })

                        //set the below fields to the selected event details
                        $('#hdEventID').val(selectedEvent.id);
                        $('#txtTitle').selectpicker('val', selectedEvent.title);
                        $('#ddThemeColour').val(selectedEvent.color);
                        $("#txtStart").prop("disabled", true);
                        $("#txtEnd").prop("disabled", true);

                        $("#DDLRecurring")[0].selectedIndex = 1;
                        $("#DDLRecurring").prop("disabled", true);
                        $('#DDLRecurring').selectpicker('refresh')

                        $("#DDLRepeat")[0].selectedIndex = 1;
                        $("#DDLRepeat").prop("disabled", true);
                        $('#DDLRepeat').selectpicker('refresh')
                    }

                    //set the class type field with the data from the selectedEvent
                    $('#DDLClassType').val(selectedEvent.classTypeId);
                    //check if the classTypeId is not undefined then send an ajax request to the controller to papulate the dropdown list
                    if (selectedEvent.classTypeId != undefined) {
                        $.ajax({
                            type: "POST",
                            url: "/ClassTypes/GetClassType",
                            data: { 'id': selectedEvent.classTypeId },
                            success: function (data) {
                                $("#DDLClassType").prop("disabled", true);
                                $('#DDLClassType').selectpicker('refresh')
                                $('#txtPrice').val(data.Price);
                            },
                            error: function (error) {
                                alert('Failed to get Class types!');
                            }
                        })
                    }
                }
                $('#myModal').modal('hide'); // hide myModel
                $('#myModalSave').modal(); 
            }//end of form

            //Perform the following validation when the user clicks on the save button 
            //first check all the fields to ensur they are not empty 
            $('#btnSave').click(function () {
                //validation to ensure fields are not empty
                if (document.getElementById('DDLRecurring').value.trim() == "") {
                    alert("Select Recurring option");
                    return;
                }

                if (document.getElementById('DDLRepeat').value.trim() == "") {
                    alert("Repeat option required");
                    return;
                }

                if (document.getElementById('DDLClassType').value.trim() == "") {
                    alert("ClassType is required");
                    return;
                }

                if (document.getElementById('txtTitle').value.trim() == "default") {
                    bootbox.alert("Title required");
                    return;
                }

                if (document.getElementById('DDLSkills').value == "") {
                    alert("Choose at least one skill to teach");
                    return;
                }

                if (document.getElementById('ddThemeColour').value.trim() == "") {
                    alert("Choose a colour for the event");
                    return;
                }

                if (document.getElementById('txtStart').value.trim() == "") {
                    alert('Start date required');
                    return;
                }

                if (document.getElementById('txtEnd').value.trim() == "") {
                    alert('End date required!');
                    return;
                }

                //get the start and end date time from the start and end fields 
                var selectedStartDate = moment(document.getElementById('txtStart').value.trim(), "DD/MM/YYYY HH:mm a").toDate();
                var selectedEndDate = moment(document.getElementById('txtEnd').value.trim(), "DD/MM/YYYY HH:mm a").toDate();

                //if the start date is greater the end date then show an error
                if (selectedStartDate > selectedEndDate) {
                    alert('Invalid end date!');
                    return;
                }

                //if the start and end date field's date and time are the same then show an error
                if (selectedStartDate.getTime() == selectedEndDate.getTime()) {
                    alert('Start/End time can not be the same!');
                    return;
                }

                //get the start and end hour and calculate the difference between it
                //events should only be one hour long
                var startHour = selectedStartDate.getHours();
                var endHour = selectedEndDate.getHours();
                var difference = endHour - startHour;

                //if the difference is less than 1 show an error 
                //if it is less than 0 or greater than 1 than show an error 
                if (difference < 1) {
                    alert('Duration of each session or class must be 1 hour long!');
                    return;
                }
                else if (difference < 0 || difference > 1) {
                    alert('Duration cannot be this long! Each Event must an hour long!');
                    return;
                }

                //loop through the array to ensure the tutor does not have an event already at the same date time booked
                //if so show an error - this check is done as the tutor can chanage the date time of an event using the dattime picker provided
                for (var i = 0; i < events.length - 1; i++) {
                    if (events[i].id != selectedEvent.id) {
                        var currentEventDate = events[i].start.toDate().toLocaleDateString();
                        var currentEventStartTime = events[i].start.toDate().toLocaleTimeString();
                        var currentEventEndTime = events[i].end.toDate().toLocaleTimeString();

                        if (selectedStartDate.toLocaleDateString() === currentEventDate) {
                            if ((selectedStartDate.toLocaleTimeString() === currentEventStartTime &&
                                selectedEndDate.toLocaleTimeString() === currentEventEndTime)) {
                                alert('An event already exist in the selected date/time!');
                                return;
                            }
                        }
                    }
                }

                //ensure fields are not empty
                if (document.getElementById('intCapacity').value.trim() == "") {
                    alert('Capacity is required');
                    return;
                }

                if (document.getElementById('txtPrice').value.trim() == "") {
                    alert('Price is required');
                    return;
                }

                if (document.getElementById('DDLBranchNames').value.trim() == "") {
                    alert('Branch name is required');
                    return;
                }

                if (document.getElementById('DDLRoomNumbers').value.trim() == "") {
                    alert('Room number is required');
                    return;
                }

                //if the user has selected the 4 option of the recurring dropdown list which Monthly by day
                //then check if the start date is not greater than 28 
                //if so shoow an error 
                if (document.getElementById('DDLRecurring').value == 4) {
                    var startDate = moment(document.getElementById('txtStart').value.trim(), "DD/MM/YYYY HH:mm a").toDate();
                    var theDay = moment(startDate).date();
                    if (theDay > 28) {
                        alert("You cannot choose the 5th week day!");
                        return;
                    }
                }

                //get all the selected skills
                var selectedSkills = '';
                $('#DDLSkills :selected').each(function (i, selected) {
                    selectedSkills += $(selected).val() + ' ';
                });

                //make a data object and configure it with the new data 
                var data =
                    {
                        Id: $('#hdEventID').val(),
                        Title: $('#txtTitle').val(),
                        StartDate: $('#txtStart').val(),
                        EndDate: $('#txtEnd').val(),
                        RoomId: $('#DDLRoomNumbers').val(),
                        ClassTypeId: $('#DDLClassType').val(),
                        ThemeColour: $('#ddThemeColour').val(),
                        SelectedSkills: selectedSkills,
                        RecurSelectedOption: $('#DDLRecurring').val(),
                        Repeat: $('#DDLRepeat').val(),
                    }

                //send another request to the class controller to ensure the room the tutor is booking is free
                //if so, call the SaveEvent function to submit data to the server (send data to the controller)
                $.ajax({
                    type: "POST",
                    url: '/Class/CheckRoomAvailibility',
                    data: data,
                    success: function (checkData) {
                        if (checkData.status) {
                            bootbox.alert("The room is booked on the selected date and time.")
                            return;
                        } else {
                            SaveEvent(data);
                            ResetAllFields();
                        }
                    },
                    error: function (error) {
                        alert('Failed to get the Room availibility!');
                    }
                })
            })

            //SaveEvent function that sends data to the controller to save it 
            function SaveEvent(data) {
                if (data != null && confirm("Are you sure to save this event?")) {
                    $.ajax({
                        type: "POST",
                        url: '/Class/SaveEvent',
                        data: data,
                        success: function (data) {
                            if (data.status) {
                                //refresh the calendar if the status is true else its failed
                                FetchEventAndRenderCalendar();
                                $('#myModalSave').modal('hide'); //hide modal dialog pop window
                            }
                        }//show toast notification
                    }).done(function () {
                        toastr.success("Event successfully recorded.");
                    }).fail(function () {
                        toastr.error("Something unexpected happened.");
                    });
                }
            }

            //if the title is chnaged then change the themecoulour
            $("#txtTitle").change(function () {
                var val = document.getElementById('txtTitle').value;
                if (val == "Session") {
                    $("#ddThemeColour")[0].selectedIndex = 2;
                }
                else if (val == "Class") {
                    $("#ddThemeColour")[0].selectedIndex = 1;
                }
                else {
                    $("#ddThemeColour")[0].selectedIndex = 0;
                }
            });

            //send an ajax request to the controller ClassTypes 
            //and then get the data and papulate the dropdownlist
            $.ajax({
                type: "POST",
                url: "/ClassTypes/FetchClassTypes",
                success: function (data) {      
                    for (var i = 0; i < data.length; i++) {
                        $("#DDLClassType").append('<option value="' + data[i].Id + '">' + data[i].ClassTypeName + '</option>');
                    }
                    $("#DDLClassType").selectpicker("refresh");
                },
                error: function (error) {
                    alert('Failed to get Class types!');
                }
            })

            //send an ajax request to the controller ClassTypes with the dropdown list value
            //and then get the data and papulate the price textbox
            $('#DDLClassType').change(function () {
                var value = $(this).val();

                $.ajax({
                    type: "POST",
                    url: "/ClassTypes/GetClassType",
                    data: { 'Id': value },
                    success: function (data) {
                        document.getElementById('txtPrice').value = data.Price;
                    },
                    error: function (error) {
                        alert('Failed to get the price');
                    }
                })
            });

            //send an ajax request to the controller Branches 
            //and then get the data and papulate the branches dropdown list
            $.ajax({
                type: "POST",
                url: "/Branches/FetchBranches",
                success: function (data) {
                    for (var i = 0; i < data.length; i++) {
                        $("#DDLBranchNames").append('<option value="' + data[i].Id + '">' + data[i].LocationName + '</option>');
                    }
                    $("#DDLBranchNames").selectpicker("refresh");
                },
                error: function (error) {
                    alert('Failed to get branches!');
                }
            })

            //when the user change the branches dropdown list 
            //send a request to the rooms controller to fetch the new rooms for the branch, the selected branch id is sent with the request
            $('#DDLBranchNames').change(function () {
                var selectedBranchId = $(this).val();
                $.ajax({
                    type: "POST",
                    url: '/Rooms/FetchRoomsByLocation',
                    data: { 'Id': selectedBranchId },
                    success: function (data) {
                        $('#intCapacity').val('');
                        $('#DDLRoomNumbers').find('option:gt(0)').remove(); //remove all elements but the first one from rooms dropdown list
                        $("#DDLRoomNumbers")[0].selectedIndex = 0;
                        $('#DDLRoomNumbers').removeAttr('disabled');

                        for (var i = 0; i < data.length; i++) {
                            $("#DDLRoomNumbers").append('<option value="' + data[i].Id + '">' + data[i].RoomNumber + '</option>');
                        }
                        $("#DDLRoomNumbers").selectpicker("refresh");
                    },
                    error: function (error) {
                        alert('Failed to get the Rooms numbers for selected branch!');
                    }
                })
            })

            //Ensuring if Recur Option is (None) - Then disable Repeat and select it to (No Repeat)
            //Else enable Repeat DDL and set the first element as selected
            $('#DDLRecurring').change(function () {
                var selectedRecurOption = document.getElementById('DDLRecurring').value;
                if (selectedRecurOption == 1) {
                    $("#DDLRepeat")[0].selectedIndex = 1;
                    $("#DDLRepeat").prop("disabled", true);
                    $('#DDLRepeat').selectpicker('refresh');
                }
                else {
                    $('#DDLRepeat').removeAttr('disabled');
                    $("#DDLRepeat")[0].selectedIndex = 0;
                    $('#DDLRepeat').selectpicker('refresh')
                }
            })

            //send an ajax request to the controller rooms - the room id is sent with the request
            //and then get the data and papulate the capacity field
            $('#DDLRoomNumbers').change(function () {
                var selectedRoomId = $(this).val();
                if (selectedRoomId != null) {
                    $.ajax({
                        type: "POST",
                        url: '/Rooms/FetchRoomForCapacity',
                        data: { 'Id': selectedRoomId },
                        success: function (data) {
                            $('#intCapacity').val(data.Capacity);
                        },
                        error: function (error) {
                             alert('Failed to get the Rooms numbers for selected branch!');
                        }
                    })
                }
            })

            //send an ajax request to the controller TutorSkills
            //and then get the data and papulate the skills dropdown list
            $.ajax({
                type: "POST",
                url: '/TutorSkills/FetchTutorSkills',
                success: function (data) {
                    for (var i = 0; i < data.length; i++) {
                        $("#DDLSkills").append('<option data-tokens="' + data[i].Skill.SkillName + '" value="' + data[i].Skill.Id + '">' + data[i].Skill.SkillName + '</option>');
                    }
                    $("#DDLSkills").selectpicker("refresh");
                },
                error: function (error) {
                    alert('Failed to get the logged-in tutor skills!');
                }
            })

            //a function that rest all the fields
            function ResetAllFields() {
                $("#DDLRoomNumbers")[0].selectedIndex = 0;
                $("#DDLBranchNames")[0].selectedIndex = 0;
                $("#DDLClassType")[0].selectedIndex = 0;
                $("#txtTitle")[0].selectedIndex = 0;
                $("#DDLRepeat")[0].selectedIndex = 0;
                $("#DDLRecurring")[0].selectedIndex = 0;

                $("#btnDelete").prop("disabled", false);
                $("#DDLBranchNames").prop("disabled", false);
                $("#DDLRepeat").prop("disabled", false);
                $("#DDLRecurring").prop("disabled", false);

                $("#txtStart").prop("disabled", false);
                $("#txtEnd").prop("disabled", false);

                $("#DDLClassType").prop("disabled", false);

                if ($('#DDLBranchNames').val() == null) {
                    $('#DDLRoomNumbers').find('option:gt(0)').remove(); //remove all elements but the first one
                    jQuery("#DDLRoomNumbers").prop('disabled', 'disabled');
                }

                document.getElementById('txtPrice').value = 0;
                document.getElementById('intCapacity').value = "";
                $('#DDLSkills').selectpicker("deselectAll", true).selectpicker("refresh");
                $('#DDLBranchNames').selectpicker("deselectAll", true).selectpicker("refresh");
                $('#DDLRoomNumbers').selectpicker("deselectAll", true).selectpicker("refresh");
                $('#DDLRecurring').selectpicker("deselectAll", true).selectpicker("refresh");
                $('#DDLRepeat').selectpicker("deselectAll", true).selectpicker("refresh");
                $('#DDLClassType').selectpicker("deselectAll", true).selectpicker("refresh");
                $('#txtTitle').selectpicker("deselectAll", true).selectpicker("refresh");
            }
        })
    </script>
}
